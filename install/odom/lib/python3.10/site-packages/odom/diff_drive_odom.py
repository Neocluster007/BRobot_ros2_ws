import rclpy
from rclpy.node import Node
from nav_msgs.msg import Odometry
from std_msgs.msg import Int32
import math

class DiffDriveOdom(Node):
    def __init__(self):
        super().__init__('diff_drive_odom')

        self.r = 0.0221  # wheel radius (m)
        self.L = 0.1275  # distance between wheels (m)
        self.TPR = 407   # ticks per revolution
        self.distance_per_tick = (2 * math.pi * self.r) / self.TPR

        self.left = 0
        self.right = 0
        self.last_left = 0
        self.last_right = 0

        self.x = 0.0
        self.y = 0.0
        self.theta = 0.0

        self.odom_pub = self.create_publisher(Odometry, '/odom', 10)

        self.create_subscription(Int32, '/encoder_L', self.left_callback, 10)
        self.create_subscription(Int32, '/encoder_R', self.right_callback, 10)

        self.timer = self.create_timer(0.05, self.update_odom)  # 20 Hz

    def left_callback(self, msg):
        self.left = msg.data

    def right_callback(self, msg):
        self.right = msg.data

    def euler_to_quaternion(self, roll, pitch, yaw):
        qx = math.sin(roll/2) * math.cos(pitch/2) * math.cos(yaw/2) - math.cos(roll/2) * math.sin(pitch/2) * math.sin(yaw/2)
        qy = math.cos(roll/2) * math.sin(pitch/2) * math.cos(yaw/2) + math.sin(roll/2) * math.cos(pitch/2) * math.sin(yaw/2)
        qz = math.cos(roll/2) * math.cos(pitch/2) * math.sin(yaw/2) - math.sin(roll/2) * math.sin(pitch/2) * math.cos(yaw/2)
        qw = math.cos(roll/2) * math.cos(pitch/2) * math.cos(yaw/2) + math.sin(roll/2) * math.sin(pitch/2) * math.sin(yaw/2)
        return [qx, qy, qz, qw]

    def update_odom(self):
        delta_left = self.left - self.last_left
        delta_right = self.right - self.last_right

        self.last_left = self.left
        self.last_right = self.right

        dL = delta_left * self.distance_per_tick
        dR = delta_right * self.distance_per_tick
        dC = (dL + dR) / 2.0
        dTheta = (dR - dL) / self.L

        self.theta += dTheta
        self.x += dC * math.cos(self.theta)
        self.y += dC * math.sin(self.theta)

        q = self.euler_to_quaternion(0, 0, self.theta)

        odom = Odometry()
        odom.header.stamp = self.get_clock().now().to_msg()
        odom.header.frame_id = 'odom'
        odom.child_frame_id = 'base_link'
        odom.pose.pose.position.x = self.x
        odom.pose.pose.position.y = self.y
        odom.pose.pose.orientation.x = q[0]
        odom.pose.pose.orientation.y = q[1]
        odom.pose.pose.orientation.z = q[2]
        odom.pose.pose.orientation.w = q[3]
        self.odom_pub.publish(odom)

def main(args=None):
    rclpy.init(args=args)
    node = DiffDriveOdom()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()
